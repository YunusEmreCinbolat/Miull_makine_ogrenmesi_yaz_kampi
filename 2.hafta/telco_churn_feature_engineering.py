# -*- coding: utf-8 -*-
"""Telco_Churn_Feature_Engineering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PeHQiUMKxUgYX0A9zg5_vQwaTjQWeQT4
"""

from google.colab import files
uploaded=files.upload()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('Telco-Customer-Churn.csv')
df.head()

print(df.dtypes)

numeric_variables=df.select_dtypes(include=["int64","float64"])
numeric_variables.head()

object_variables=df.select_dtypes(include="object")
object_variables.head()

numeric_variables=df.select_dtypes(include=["int64","float64"])
for column in numeric_variables.columns:
  print(f'{column}:\n{df.groupby("Churn")[column].mean()}\n')

from pandas.plotting import boxplot
plt.figure(figsize=(12,6))
boxplot=df.boxplot(column=list(numeric_variables.columns))
plt.xticks(rotation=45)
plt.title("Aykırı Gözlem Analizi")
plt.show()

misssing_values=df.isnull().sum()
total_missing=misssing_values.sum()
misssing_percent=(misssing_values/len(df))*100

missing_stats=pd.DataFrame({'Eksik Deger sayisi':misssing_values, 'Eksi değer yüzdesi': misssing_percent})
print(missing_stats)
print(f'Toplam eksik deger sayısı: {total_missing}')

correlation_matrix=df.corr()
print("Korelasyon matrisi: ")
print(correlation_matrix)

plt.figure(figsize=(12,8))
sns.heatmap(correlation_matrix,annot=True,cmap='coolwarm',fmt='.2f',linewidths=0.5)
plt.title("Değişkenler arası koreelasyon analizi")
plt.show()

def handle_outliers_threshold(column, threshold=3):
    z_scores = np.abs((column - column.mean()) / column.std())
    outliers = z_scores > threshold
    column[outliers] = np.where(outliers, column.mean(), column)  # Aykırı değerleri ortalama ile değiştirin
    return column

# Aykırı değerleri düzeltmek için seçilen sütunları belirleyin (örnek olarak 'TotalCharges' sütunu seçilmiştir)
outlier_columns = [df.columns]

# Aykırı değerleri düzeltme işlemini uygulayın, farklı veri tiplerini ele alın
for column in outlier_columns:
    if df[column].dtypes.bool == "object":
        df[column] = pd.to_numeric(df[column], errors='coerce')  # Stringleri numeric yapın (hatalı dönüşümler için NaN atayacaktır)
    if np.issubdtype(df[column].dtypes, np.number):  # Sadece sayısal veri tipleri üzerinde işlem yapın
        df[column] = handle_outliers_threshold(df[column])

# Güncellenmiş veri setini kaydedin
df.to_csv('Telco_Churn_Feature_Engineering_processed.csv', index=False)

# Güncellenmiş veri setini inceleyin
df.head(500)

# Yeni değişken 1: 'Tenure_Category'
# 'Tenure' sütununu kullanarak müşteri tenure (abonelik süresi) değerine bağlı olarak bir kategori oluşturalım.
# Örneğin, 1-12 ay arası "Yeni Müşteri", 13-24 ay arası "Orta Süreli Müşteri", 25 ay ve üzeri "Uzun Süreli Müşteri" olarak tanımlayalım.

def tenure_category(tenure):
    if tenure <= 12:
        return 'Yeni Müşteri'
    elif tenure <= 24:
        return 'Orta Süreli Müşteri'
    else:
        return 'Uzun Süreli Müşteri'

df['Tenure_Category'] = df['tenure'].apply(tenure_category)

# Yeni değişken 2: 'Monthly_Charges_Squared'
# 'MonthlyCharges' sütununu kullanarak yeni bir sütun oluşturalım ve her bir değerin karesini alalım.

df['Monthly_Charges_Squared'] = df['MonthlyCharges'] ** 2

# Güncellenmiş veri setini kaydedin
df.to_csv('Telco_Churn_Feature_Engineering_with_new_variables.csv', index=False)

# Güncellenmiş veri setini inceleyin
df.head()

# 1. Label Encoding
# Label Encoding, sadece tek bir sütunun kategorik değerlerini 0'dan başlayarak sıralı sayılarla temsil eder.
from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
df['Gender_Encoded'] = label_encoder.fit_transform(df['gender'])

# 2. One-Hot Encoding
# One-Hot Encoding, kategorik sütunları 0 ve 1'lerden oluşan yeni sütunlara dönüştürür.
# Her kategori için ayrı bir sütun oluşturur ve ilgili kategorinin varlığına göre 0 veya 1 değerlerini kullanır.

#df = pd.get_dummies(df, columns=['InternetService', 'Contract'], drop_first=True)

# 3. Ordinal Encoding
# Ordinal Encoding, sıralı kategorik değerleri sayısal olarak temsil eder.
# Sıralı olmayan kategorik değerlerde kullanılması uygun değildir.

internet_service_mapping = {
    'DSL': 1,
    'Fiber optic': 2,
    'No': 0
}

#df['InternetService_Encoded'] = df['InternetService'].map(internet_service_mapping)

# Güncellenmiş veri setini kaydedin
df.to_csv('Telco_Churn_Feature_Engineering_encoded.csv', index=False)

# Güncellenmiş veri setini inceleyin
df.head()  # Güncellenmiş veri setini görüntüleyin

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix

df['customerID'] = pd.to_numeric(df['customerID'], errors='coerce')

# Adım 4: Numerik değişkenler için standartlaştırma
# Standartlaştırma yapmadan önce bağımsız değişkenleri ve bağımlı değişkeni ayıralım
X = df.drop(['Churn'], axis=1)
y = df['Churn']

# Train ve test veri setlerini oluşturun
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standartlaştırma için StandardScaler'ı kullanın
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Adım 5: Model oluşturunuz
# Örnek olarak Logistic Regression kullanalım
logreg = LogisticRegression()
logreg.fit(X_train_scaled, y_train)

# Modeli kullanarak tahmin yapın
y_pred = logreg.predict(X_test_scaled)

# Model performansını değerlendirin
accuracy = accuracy_score(y_test, y_pred)
confusion = confusion_matrix(y_test, y_pred)

print("Model Accuracy:", accuracy)
print("Confusion Matrix:\n", confusion)

df.info