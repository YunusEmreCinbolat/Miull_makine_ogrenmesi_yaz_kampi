# -*- coding: utf-8 -*-
"""Diabetes_Feature_Engineering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CFs74kwRYxuogfL7DwuqioN1kEs-6jXo
"""

from google.colab import files
upload=files.upload()

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

pd.set_option('display.width',500)
df=pd.read_csv('diabetes.csv')
df.head()

print(df.dtypes)

# Veri setindeki numerik değişkenlerin özet istatistiklerini alalım
numeric_variables = df.select_dtypes(include=['int64', 'float64'])
print(numeric_variables.describe())

df['Outcome']=df['Outcome'].astype('object')
df.dtypes.head()

# Veri setindeki kategorik değişkenleri inceleyelim
categorical_variables = df.select_dtypes(include=['object'])
print(categorical_variables['Outcome'].value_counts())

df.head()

# Hedef değişken "Outcome" sütununa göre kategorik değişkenlerin ortalamalarını hesaplayalım
categorical_variables = df.select_dtypes(include=['object'])

for column in categorical_variables.columns:
    if column != 'Outcome':
        print(f"{column}:\n{df.groupby('Outcome')[column].mean()}\n")

# Hedef değişken "Outcome" sütununa göre numerik değişkenlerin ortalamalarını hesaplayalım
numeric_variables = df.select_dtypes(include=['int64', 'float64'])

for column in numeric_variables.columns:
    print(f"{column}:\n{df.groupby('Outcome')[column].mean()}\n")

plt.figure(figsize=(12, 6))
boxplot = df.boxplot(column=list(numeric_variables.columns))
plt.xticks(rotation=45)
plt.title("Kutu Grafiği ile Aykırı Gözlem Analizi")
plt.show()

# Veri setindeki eksik değerleri kontrol edelim
missing_values = df.isnull().sum()

# Her bir sütundaki eksik değer sayısını ve yüzdesini hesaplayalım
total_missing = missing_values.sum()
missing_percent = (missing_values / len(df)) * 100

# Eksik değer istatistiklerini ekrana yazdıralım
missing_stats = pd.DataFrame({'Eksik Değer Sayısı': missing_values, 'Eksik Değer Yüzdesi': missing_percent})
print(missing_stats)
print(f"Toplam Eksik Değer Sayısı: {total_missing}")

correlation_matrix = df.corr()

# Korelasyon matrisini ekrana yazdıralım
print("Korelasyon Matrisi:")
print(correlation_matrix)

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title("Değişkenler Arasındaki Korelasyon Matrisi")
plt.show()

columns_with_zeros = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
df[columns_with_zeros] = df[columns_with_zeros].replace(0, np.nan)
df.head(100)

# BMI kategorisi oluşturma
df['BMI_Category'] = pd.cut(df['BMI'], bins=[0, 18.5, 24.9, 29.9, float('inf')],
                            labels=['Underweight', 'Normal Weight', 'Overweight', 'Obese'])

# BMI_Category sütununu ekrana yazdıralım
print(df['BMI_Category'].value_counts())

# Yaş grubu oluşturma
df['Age_Group'] = pd.cut(df['Age'], bins=[0, 30, 45, 60, float('inf')],
                         labels=['30 and under', '31-45', '46-60', '61 and above'])

# Age_Group sütununu ekrana yazdıralım
print(df['Age_Group'].value_counts())

from sklearn.preprocessing import LabelEncoder

# BMI_Category için Label Encoding
label_encoder = LabelEncoder()
df['BMI_Category_LabelEncoded'] = label_encoder.fit_transform(df['BMI_Category'])

# Age_Group için Label Encoding
df['Age_Group_LabelEncoded'] = label_encoder.fit_transform(df['Age_Group'])

# İlgili sütunları ekrana yazdıralım
print(df[['BMI_Category', 'BMI_Category_LabelEncoded', 'Age_Group', 'Age_Group_LabelEncoded']].head())

# BMI_Category için One-Hot Encoding
onehot_encoded = pd.get_dummies(df['BMI_Category'], prefix='BMI_Category')
df = pd.concat([df, onehot_encoded], axis=1)

# Age_Group için One-Hot Encoding
onehot_encoded = pd.get_dummies(df['Age_Group'], prefix='Age_Group')
df = pd.concat([df, onehot_encoded], axis=1)

# İlgili sütunları ekrana yazdıralım
print(df.head())

from sklearn.preprocessing import StandardScaler
# Standartlaştırma için numerik değişkenleri seçelim
numeric_variables = df.select_dtypes(include=['int64', 'float64'])

# StandardScaler nesnesini oluşturalım ve veri setini standartlaştıralım
scaler = StandardScaler()
scaled_data = scaler.fit_transform(numeric_variables)

# Standartlaştırılmış verileri yeni bir DataFrame'e dönüştürelim
scaled_df = pd.DataFrame(scaled_data, columns=numeric_variables.columns)

# Standartlaştırılmış veri setini ekrana yazdıralım
print(scaled_df.head())

df.head()

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
# BMI_Category ve Age_Group için One-Hot Encoding işlemini gerçekleştirelim
df = pd.get_dummies(df, columns=['BMI_Category', 'Age_Group'])

# Özellikler (X) ve hedef değişken (y) olarak veriyi ayıralım
X = df.drop(['Outcome'], axis=1)
y = df['Outcome']

# Veri setindeki eksik değerleri dolduralım
imputer = SimpleImputer(strategy='mean')  # You can use different strategies like 'median', 'most_frequent', etc.
X_imputed = imputer.fit_transform(X)

# Veriyi eğitim ve test setlerine bölelim
X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.2, random_state=42)

# Random Forest sınıflandırma modelini oluşturalım ve eğitelim
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Modelin test verisi üzerinde performansını değerlendirelim
y_pred = model.predict(X_test)

# Accuracy değerini ve sınıflandırma raporunu ekrana yazdıralım
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

print("Sınıflandırma Raporu:")
print(classification_report(y_test, y_pred))

# Confusion matrisini ekrana yazdıralım
confusion_mat = confusion_matrix(y_test, y_pred)
print("Confusion Matrisi:")
print(confusion_mat)